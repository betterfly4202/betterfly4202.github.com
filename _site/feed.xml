<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2018-11-20T01:19:31+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">효자손 개발자</title><subtitle>주니어 개발자의 성장 과정</subtitle><author><name>@betterFLY</name><email>betterfly4202@gmail.com</email></author><entry><title type="html">String 이야기 2부</title><link href="http://localhost:4000/java/string_2/" rel="alternate" type="text/html" title="String 이야기 2부" /><published>2018-11-19T00:00:00+09:00</published><updated>2018-11-19T00:00:00+09:00</updated><id>http://localhost:4000/java/string_2</id><content type="html" xml:base="http://localhost:4000/java/string_2/">&lt;h2 id=&quot;stringbuilder-와-stringbuffer&quot;&gt;StringBuilder 와 StringBuffer&lt;/h2&gt;

&lt;p&gt;조금 식상한 감이 있다. &lt;code&gt;StringBuilder&lt;/code&gt;와 &lt;code&gt;StringBuffer&lt;/code&gt; 대한 차이 및 비교는 너무나 많은 자료가 많기 떄문이다.&lt;/p&gt;

&lt;p&gt;조금 더 의미있는 기록을 남기기 위해서, 그리고 내 것으로 소화하기 위해선 단순히 사실만을 나열할 것이 아니라&lt;/p&gt;

&lt;p&gt;실제로 어떻게 사용되고, 적용되는지 조금 더 세밀히 들여다 봐야겠다.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;우선 앞선 &lt;a href=&quot;https://betterfly88.github.io/java/string_1/&quot;&gt;String 이야기 1부&lt;/a&gt;에서 언급했던 Sting문자열을 합칠 때 컴파일 과정을 다시 확인해 볼 필요가 있다.&lt;/p&gt;

&lt;p&gt;다시 정리하자면, 단순 String만을 활용하여 문자열을 합친다면 immutable한 속성의 String클래스는 그 자체로 연산이 불가능하기 때문에 계속해서 새로운 String 인스턴스를 생성시킬 것이고, 이것이 결과적으로 메모리 효율을 떨어뜨린다는 것이다.&lt;/p&gt;

&lt;p&gt;그리고 JDK1.5 버전 이후로는 이러한 문제를 돕고자 JVM이 컴파일 과정에서 StringBuilder로 처리해준다는 것까지 살펴보았다.&lt;/p&gt;

&lt;p&gt;이를 통해 String을 쓰지 않고 StringBuilder를 사용했는지는 이해됐다.&lt;/p&gt;

&lt;p&gt;그렇다면 왜 StringBuffer가 아닌 StringBuilder를 사용했을까?&lt;/p&gt;

&lt;p&gt;Java docs의 API문서를 통해 두 클래스간 성격을 파악해봐야겠다.&lt;/p&gt;

&lt;h3 id=&quot;stringbuffer&quot;&gt;StringBuffer&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/study/dev/2018/11_StirngBuffer.png&quot; alt=&quot;StringBuffer&quot; /&gt;&lt;/p&gt;

&lt;p&gt;밑줄친 부분이 StringBuffer의 중요한 특징을 설명해주는 것 같다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;mutable한 객체이다
    &lt;ul&gt;
      &lt;li&gt;String과 유사하지만 수정이 가능하다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;thread-safe하다
    &lt;ul&gt;
      &lt;li&gt;multiple-threads환경에서 사용하기에 안전하다.(method에 synchronized가 되어 있기 때문에!)&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;mutable/immuntable에 대한 개념은 지난 String에 대한 고찰에서 살펴보았으니 이해가 된다.&lt;/p&gt;

    &lt;p&gt;하지만 thread-safe하다는 것은 아직 이해가 되지 않는다.&lt;/p&gt;

    &lt;p&gt;그 궁금증은 잠시 후 해결하기로 하고 StringBuilder의 특징을 보자.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;stringbuilder&quot;&gt;StringBuilder&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/study/dev/2018/11_StringBuilder.png&quot; alt=&quot;StringBulder&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;mutable한 객체이다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;StringBuffer와 호환되는 API를 사용하지만! synchronization을 보장하지 않는다&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;StringBuffer 대신 단일 스레드에서 사용하기 위해 설계되었다.
    &lt;ul&gt;
      &lt;li&gt;StringBuffer는 synchronization을 지원하기 때문에 멀티스레드에서 안전하지만, StringBuilder는 synchronization을 지원하지 않기 떄문에 단일 스레드에서 효율적이라는 것이다.(Single/Multi thread에 대한 내용은 하단에 다시 정리하겠다.)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;마지막 문장이 중요한데, &lt;strong&gt;StringBuffer보다 수행속도가 빠르므로 가능하다면 StringBuilder를 사용하는 것을 추천한다.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;스레드에 대한 이야기는 차츰 정리하고,&lt;/p&gt;

&lt;p&gt;왜 자바에서 String문자열을 조합할때 컴파일과정에서 StringBuffer 대신 StringBuilder를 사용하는지 밝혀졌다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;StringBuilder가 StringBuffer보다 속도가 빠르다는 것이다! &lt;br /&gt;
&lt;em&gt;단! Single Thread에서만 유효하다는 거!&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;그러면 잠깐 테스트를 좀 해봐야겠다. 실제로 얼마나 성능이 차이가 나는지를.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;compareWithBuilderNBuffer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;gc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GregorianCalendar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getTimeInMillis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;startMemory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Runtime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getRuntime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;freeMemory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;StringBuffer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StringBuffer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//        StringBuilder sb = new StringBuilder();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;200000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++){&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;sb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;:&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;sb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Hi&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GregorianCalendar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getTimeInMillis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;endMemory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Runtime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getRuntime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;freeMemory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Time Taken:&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Memory used:&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;startMemory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endMemory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/study/dev/2018/11_compare_performance.png&quot; alt=&quot;compare&quot; /&gt;&lt;/p&gt;

&lt;p&gt;실패다. 거의 차이가 없거나 StringBuffer가 더 빠르기도 하다.&lt;/p&gt;

&lt;p&gt;테스트 수치가 잘못되었나 싶다.&lt;/p&gt;

&lt;p&gt;실제 성능을 비교한 블로그가 있어 링크를 참고한다. &lt;a href=&quot;http://egloos.zum.com/deblan2/v/419830&quot;&gt;String속도측정&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;블로그에 따르면 163,840,000번 (약 1억 6천번) append를 하는데 2.65초밖에 걸리지 않는다.(StringBuffer가 2.65초 시간이 더 걸렸다는 것.)&lt;/p&gt;

&lt;p&gt;뭐 정석대로 싱글 스레드라면, StringBuilder를 사용하지 않을 이유가 없겠지만. 사실상 드라마틱한 차이 정도는 아닌 것을 알 수 있다.&lt;/p&gt;

&lt;p&gt;자 이제 마지막으로 Single/Multi Thread에 대한 이야기다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;StringBuffer&lt;/code&gt;의 내부를 들어가보면 append() 메서드가 다음과 같이 선언되어있다.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;synchronized&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StringBuffer&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;toStringCache&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;valueOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;synchronized&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StringBuffer&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;toStringCache&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;다음은 &lt;code&gt;StringBuilder&lt;/code&gt;의 apeend 메서드이다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StringBuilder&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;valueOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StringBuilder&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이전에 API문서처럼 동일한 메서드와 파라미터를 받고 있다. 하지만 그 성격이 다르다.(당연하게도 똑같다면 굳이 두 클래스가 존재할 이유가 없다.)&lt;/p&gt;

&lt;p&gt;StringBuffer는 &lt;em&gt;synchronized&lt;/em&gt; 를 지원하는 것이다!&lt;/p&gt;

&lt;p&gt;thread에 대한 기본 개념은 과거포스팅을 참고하시라! &lt;a href=&quot;https://betterfly88.github.io/java/Proces_Thread/&quot;&gt;Process와 Thread
&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;정리하자면 쉽게 말해 메서드 하나에서 하나의 기능만 순차적으로(동기) 수행할 것이라면(싱글 스레드) StringBuilder를 사용하는 것이 효율적이다.&lt;/p&gt;

&lt;p&gt;하지만 멀티스레드 환경에서 비동기적으로 문자열 처리를 한다면 StringBuffer를 처리하면 된다는 간단한 결론이 나온다.&lt;/p&gt;

&lt;p&gt;또한 JDK1.5이상의 버전을 사용한다면, String연산에서 굳이 StringBuilder를 고민할 필요도 없다.&lt;/p&gt;

&lt;p&gt;즉 우리가 고밀한 것은 문자열 처리를 하는데, 이 환경이 싱글 스레드냐 멀티 스레드냐만을 고민하여 StringBuffer를 적재 적소에 사용하면 된다는 개념만 탑재하면 될 것이다.&lt;/p&gt;

&lt;h3 id=&quot;참고&quot;&gt;참고&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;https://novemberde.github.io/2017/04/15/String_0.html&lt;/li&gt;
  &lt;li&gt;https://www.geeksforgeeks.org/stringbuffer-class-in-java/&lt;/li&gt;
  &lt;li&gt;https://www.journaldev.com/137/stringbuffer-vs-stringbuilder&lt;/li&gt;
&lt;/ul&gt;</content><author><name>@betterFLY</name><email>betterfly4202@gmail.com</email></author><category term="String" /><category term="StringBuilder" /><category term="StringBuffer" /><summary type="html">StringBuilder 와 StringBuffer</summary></entry><entry><title type="html">AWT(Abstract Window Toolkit)</title><link href="http://localhost:4000/notes/1811_5/" rel="alternate" type="text/html" title="AWT(Abstract Window Toolkit)" /><published>2018-11-16T00:00:00+09:00</published><updated>2018-11-16T00:00:00+09:00</updated><id>http://localhost:4000/notes/1811_5</id><content type="html" xml:base="http://localhost:4000/notes/1811_5/">&lt;h3 id=&quot;자바와-awt-그리고&quot;&gt;자바와 AWT 그리고…&lt;/h3&gt;

&lt;p&gt;최근 자바로 비트매니아와 같은 음악 게임을 만들려고 작업을 하고 있었다.&lt;/p&gt;

&lt;p&gt;순수 자바로 하기 때문에 GUI는 SWING/AWT를 이용할 수 밖에 없었다.&lt;/p&gt;

&lt;p&gt;그리고 열심히 화면을 하나하나 그려갔다.&lt;/p&gt;

&lt;p&gt;배경 이미지를 골랐고, 버튼이미지들, 그리고 배경음악으로 깔릴 BGM과 플레이어까지 붙였다.&lt;/p&gt;

&lt;p&gt;뭐 딱히 어려운 부분도 아니고 순조롭게 그려나가는 중…&lt;/p&gt;

&lt;p&gt;실행을 했는데 화면이 아무리 해도 안뜬다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/notes/2018/11/black_image.png&quot; alt=&quot;blackImage&quot; /&gt;&lt;/p&gt;

&lt;p&gt;실제로 이렇게 배경화면이 죽어버리고 무슨 짓을 해도 화면이 안뜬다.&lt;/p&gt;

&lt;p&gt;아무리 인터넷을 뒤져봐도 큰 문제는 없어보이고.&lt;/p&gt;

&lt;실제 소스=&quot;&quot; 첨가=&quot;&quot;&gt;
&lt;/실제&gt;</content><author><name>@betterFLY</name><email>betterfly4202@gmail.com</email></author><category term="AWT" /><summary type="html">자바와 AWT 그리고…</summary></entry><entry><title type="html">Role Playing Game</title><link href="http://localhost:4000/notes/1811_4/" rel="alternate" type="text/html" title="Role Playing Game" /><published>2018-11-14T00:00:00+09:00</published><updated>2018-11-14T00:00:00+09:00</updated><id>http://localhost:4000/notes/1811_4</id><content type="html" xml:base="http://localhost:4000/notes/1811_4/">&lt;p&gt;새로운 일을 하는 것은 언제나 즐겁다.&lt;/p&gt;

&lt;p&gt;새로운 일을 하는 것은 내 머릿속에 없는 무언가가 나에게 들어오는 과정이다.&lt;/p&gt;

&lt;p&gt;처음 그 기술 또는 업무를 익힐때는 숙련도가 낮아 크고 작은 실수도 반복하고, 실제로 이것이 좋은것인지 필요한것인지 판단하기 힘들다.(새로운것이라고 무조건 옳고, 좋은 것은 아닐 것이다)&lt;/p&gt;

&lt;p&gt;그리고 그것이 내것이 되었을때. 비로소 똥인지 된장인지 판별이 가능하기도 하다.&lt;/p&gt;

&lt;p&gt;내가 가장 좋아했던 &lt;strong&gt;WOW(World Of Warcraft)&lt;/strong&gt;라는 게임이 있다.&lt;/p&gt;

&lt;p&gt;캐릭터를 새로 생성하면 기본공격밖에 없다.&lt;/p&gt;

&lt;p&gt;처음 시작하는 마을에서부터 퀘스트를 부여 받으며 기본 공격만을 이용해서 레벨업을 하고, 스킬을 익히며 점점 강해진다.&lt;/p&gt;

&lt;p&gt;지금은 없지만 과거의 와우에는 공격/스킬 숙련도가 있어서 처음 배웠을때(숙련도가 낮았을 때)는 ‘MISS’도 많이 나고 삽질을 하기 일쑤다.&lt;/p&gt;

&lt;p&gt;하지만 거듭 같은 공격/스킬을 사용할수록 해당 숙련도가 상승하고 최대치의 숙련도까지 익히면 거의 ‘MISS’가 나는 일이 없다.&lt;/p&gt;

&lt;p&gt;레벨이 높을 수록 많은 스킬을 보유할 수 있다.&lt;/p&gt;

&lt;p&gt;우리는 이 보유한 많은 스킬들을 저마다 개성에 또는 특성에 맞게 조합하여 자신만의 스킬트리를 완성한다.&lt;/p&gt;

&lt;p&gt;우리는 이렇게 강해지면 던전이라는 곳에서 팀을 이루어 강한 상대를 상대한다. 그리고 그 던전을 클리어하면 좋은 보상이 떨어진다.(레이드는 더욱 큰 조직활동)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/notes/2018/11/wow.jpg&quot; alt=&quot;wow&quot; /&gt;&lt;/p&gt;

&lt;p&gt;어떤가?&lt;/p&gt;

&lt;p&gt;저 신규 생성된 캐릭터에 ‘나’를 대입하고, 공격/스킬은 우리가 익히는 언어 또는 기술 등에 대입해보면 우리가 하는 일과 전혀 다르지 않다.&lt;/p&gt;

&lt;p&gt;아니, 어쩌면 개발자를 모티브로 만든건 아닌가? 생각이 들 정도로 정확히 같은 패턴이다.&lt;/p&gt;

&lt;p&gt;사실 개발자에 국한되는 것이 아니라 우리 인간의 삶과 꼭 닮아 있다.&lt;/p&gt;

&lt;p&gt;(사실 우리는 ‘역할 놀이(Role Playing Game)’를 하고 있는 것이다!)&lt;/p&gt;

&lt;p&gt;사실 새로운 것을 배운다는 것.&lt;/p&gt;

&lt;p&gt;그 즐거운 과정이 게임내에서 케릭터를 육성하는 과정과 다르지 않다는 생각이 들어 포스팅을 시작했는데 결론을 맺기가 어렵다.&lt;/p&gt;

&lt;p&gt;쉽게 생각하면 편한 것 같다.&lt;/p&gt;

&lt;p&gt;어차피 새로운 것은 다 어렵다. 그래서 두렵기도하다. 때로는 계속 새로운 것들을 접하다보면 지칠 수도 있다.&lt;/p&gt;

&lt;p&gt;최근에 몸으로 느끼는 것 중에 ‘롱런’할 수 있는 가장 근본적인 방법 1순위가 ‘(건강한)체력’ 그 다음으로 ‘(본질에 대한)이해’인 것 같다.&lt;/p&gt;

&lt;p&gt;이 과정들을 항상 즐길 수 있는 강인한 체력을 길러야겠다.&lt;/p&gt;

&lt;p&gt;이제 시작이니까.&lt;/p&gt;</content><author><name>@betterFLY</name><email>betterfly4202@gmail.com</email></author><summary type="html">새로운 일을 하는 것은 언제나 즐겁다.</summary></entry><entry><title type="html">String 이야기 1부</title><link href="http://localhost:4000/java/string_1/" rel="alternate" type="text/html" title="String 이야기 1부" /><published>2018-11-11T00:00:00+09:00</published><updated>2018-11-11T00:00:00+09:00</updated><id>http://localhost:4000/java/string_1</id><content type="html" xml:base="http://localhost:4000/java/string_1/">&lt;h2 id=&quot;string의-정체&quot;&gt;String의 정체&lt;/h2&gt;

&lt;p&gt;String 이라는 자료형은 자바에서 가장 많이 쓰이는 타입일 것이다.&lt;/p&gt;

&lt;p&gt;그 말은 다시 말해서, 많이 쓰기 때문에 중요하다는 것이다.&lt;/p&gt;

&lt;p&gt;그리고 중요하다는 것은 제대로 알고 써야한다는 것이다.&lt;/p&gt;

&lt;p&gt;그런데 아직 String이 낯설고 어렵게 느껴진다.&lt;/p&gt;

&lt;p&gt;String과 StringBuilder 그리고 StringBuffer에 대해서 꽤 많이 검색을 시도해봤다. 정말 많은 비교 글들이 있다.&lt;/p&gt;

&lt;p&gt;그리고 대게는 이와 같이 표현한다.&lt;/p&gt;

&lt;blockquote&gt;

  &lt;ul&gt;
    &lt;li&gt;String은 immutable / StringBuilder 및 StringBuffer 는 mutable 이다.&lt;/li&gt;
    &lt;li&gt;StringBuffer는 동기화(syncronize)를 지원한다.&lt;/li&gt;
    &lt;li&gt;StringBuilder는 동기화 처리를 하지 않으므로 단일 스레드내에서 성능이 좋다.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;벌써 말이 어렵다. immutable/mutable은 무엇이고,&lt;/p&gt;

&lt;p&gt;동기화처리를 한다는 것은 어떤 처리를 말하는 것일까? 문자열 데이터를 처리하는데 멀티 스레드 환경이라는게 어떤 영향을 미칠까?&lt;/p&gt;

&lt;p&gt;우선 한가지 희소식이 있다.&lt;/p&gt;

&lt;p&gt;자바(이하 라이언 갓슬링)에서 이런 고민을 하는 우리를 위해 편의를 제공해주었다.&lt;/p&gt;

&lt;p&gt;StringBuilder와 StringBuffer를 얕게 알고 있다면, 문자열을 조합할때 혼란을 겪곤한다. String을 아무 생각없이 조합해서 쓰면 안된다는 것이다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;hello&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;world&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이런 방식을 말하는 것인데, 이렇게 문자열을 조합하는 경우 과거(JDK 1.5버전 이전)에는 각각의 String 인스턴스가 생성되면서 메모리에 부담을 주기 때문에 많은양의 데이터를 처리하는 경우 성능에 이슈를 주었다고 한다.&lt;/p&gt;

&lt;p&gt;하지만 현재(JDK 1.8을 사용 중) 발전한 자바에서는 위와 같은 단순한 String 간의 조합에선 컴파일 단계에서 StringBuilder로 컴파일 되도록 자동으로 처리해준다고 한다.&lt;/p&gt;

&lt;p&gt;다음과 같이 말이다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;StringStory&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  
        &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Hello World&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  
        &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Hello&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; World&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;!!!&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Welcome to &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;!!!&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;  
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;jdk14&quot;&gt;JDK1.4&lt;/h3&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;StringStory&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  
        &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Hello World&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  
        &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Hello World&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;!!!&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Welcome to &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;!!!&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;  
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;jdk15&quot;&gt;JDK1.5&lt;/h3&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;StringStory&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  
        &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Hello World&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  
        &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Hello World&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StringBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;valueOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;  
        &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StringBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;valueOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;!!!&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;  
        &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StringBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Welcome to &quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;!!!&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;  
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위와 같이 JDK1.4의 ‘result’ 변수를 보면 str0 과 str1 이라는 각각의 인스턴스를 조합하여 결과를 산출한다.&lt;/p&gt;

&lt;p&gt;하지만 JDK1.5에서는 StringBuilder라는 하나의 인스턴스 내에서 추가되는 문자열을 append하는 형식으로 진행되기 때문에 1개의 인스턴스만 사용하므로 메모리 효율이 좋다는 것이다.&lt;/p&gt;

&lt;p&gt;이제 다시 본론으로 돌아가 근본적인 내용을 살펴보자.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;String의 중요한 성격은 &lt;strong&gt;immutable&lt;/strong&gt; 하다는 것이다.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;immutable이란 무엇인가?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/study/dev/2018/11_immutable.png&quot; alt=&quot;immutable&quot; /&gt;&lt;/p&gt;

&lt;p&gt;‘변하지 않는 객체’라는 것인데… 사실 잘 와닿지 않는다.&lt;/p&gt;

&lt;p&gt;그럼 immutable(불변)과 mutable(가변)의 차이를 알아보면 도움이 될까 싶다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;immutableTest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;immutable&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;a.hashCode : &quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hashCode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;b.hashCode : &quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hashCode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;a : &quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;b : &quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;=====change b value=======&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; add str&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;a.hashCode : &quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hashCode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;b.hashCode : &quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hashCode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;a : &quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;b : &quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;먼저 이번 주인공인 immutable한 객체. &lt;em&gt;String&lt;/em&gt;이다. 아주 심플하고 직관적인 코드다.&lt;/p&gt;

&lt;p&gt;결과는 어떨까?&lt;/p&gt;

&lt;p&gt;너무나 쉬운 예제이지만, 우리가 주목할 것은 ‘b’의 hashCode값이다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;hashCode는 해당 객체가 갖고 있는 고유한 ‘주소값’이다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/study/dev/2018/11_immutable_string.png&quot; alt=&quot;immutable_string&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;b의 hashCode값이 변했다&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;당연히 a의 결과는 변함이 없으며, b라는 변수는 추가한 문자열을 얻게 되었으며 새로운 주소값을 갖게 되었다.&lt;/p&gt;

&lt;p&gt;다시 말해 이것은 b라는 새로운 인스턴스가 생성된 것이다.&lt;/p&gt;

&lt;p&gt;단순히 &lt;strong&gt;b = a&lt;/strong&gt; 라고 선언하여, a인스턴스를 참조할때는 둘 다 ‘1596987778’ 이라는 주소를 바라보고 있었다.&lt;/p&gt;

&lt;p&gt;하지만 변수 b에 “add str” 이라는 문자열을 추가하면서 b는 새로운 주소값을 갖게되며 별도의 인스턴스를 차지하는 것이다.&lt;/p&gt;

&lt;p&gt;우리는 이것을 당연하게 생각하지만, 이것이 immutable하다는 것이다.&lt;/p&gt;

&lt;p&gt;아직 이해가 힘들다면 mutable한 객체의 변화를 살펴보자.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mutableTest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;a.hashCode : &quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hashCode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;b.hashCode : &quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hashCode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;a : &quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;b : &quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;=====change b value=======&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;a.hashCode : &quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hashCode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;b.hashCode : &quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hashCode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;a : &quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;b : &quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;int 배열을 이용해서 테스트 했다.&lt;/p&gt;

&lt;p&gt;이번 결과는 어떨까?&lt;/p&gt;

&lt;p&gt;사실 윗 부분은 볼 것도 없을 것이고, 궁금한 것은 b배열의 변화 후 a 배열의 변화이다.&lt;/p&gt;

&lt;p&gt;결과는 다음과 같다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/study/dev/2018/11_mutable_int_array.png&quot; alt=&quot;immutable_string&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이번엔 어떤가?&lt;/p&gt;

&lt;p&gt;a,b 모두 hashCode(주소값)가 변하지 않았다.&lt;/p&gt;

&lt;p&gt;그런데 아래쪽 a[1] 배열이 5로 바뀌었다!&lt;/p&gt;

&lt;p&gt;b[1]의 값을 변화시켰는데 a[1]의 값이 변한 것이다.&lt;/p&gt;

&lt;p&gt;이 역시 당연한가? 이것이 mutable한 객체이다.&lt;/p&gt;

&lt;p&gt;사실 이쯤에서 눈치를 챘을 수 있지만 이것은 자바의 중요한 개념 중 하나인 Call-by-Value &amp;amp; Call-by-Reference에 해당하는 내용이다.(필자는 이것을 모르고 정리하다가 발견한 것은 함정)&lt;/p&gt;

&lt;p&gt;[이전글]&lt;a href=&quot;&quot;&gt;Call by reference in Java&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;아직 StringBuilder &amp;amp;&amp;amp; StringBuffer 이야기는 꺼내지도 않았는데 이야기가 길어졌다.&lt;/p&gt;

&lt;p&gt;다음 포스팅에 본격적으로 String과 StringBuilder &amp;amp;&amp;amp; StringBuffer의 차이 및 활용에 대해서 조사해보도록 하겠다.&lt;/p&gt;

&lt;h3 id=&quot;참고&quot;&gt;참고&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;https://gist.github.com/benelog/b81b4434fb8f2220cd0e900be1634753&lt;/li&gt;
  &lt;li&gt;http://limkydev.tistory.com/68&lt;/li&gt;
  &lt;li&gt;http://egloos.zum.com/iilii/v/3809685&lt;/li&gt;
  &lt;li&gt;https://www.slipp.net/questions/271&lt;/li&gt;
  &lt;li&gt;http://www.mimul.com/pebble/default/2015/10/10/1444466677572.html&lt;/li&gt;
&lt;/ul&gt;</content><author><name>@betterFLY</name><email>betterfly4202@gmail.com</email></author><category term="String" /><category term="immutable" /><summary type="html">String의 정체</summary></entry><entry><title type="html">ideation</title><link href="http://localhost:4000/notes/1811_3/" rel="alternate" type="text/html" title="ideation" /><published>2018-11-10T00:00:00+09:00</published><updated>2018-11-10T00:00:00+09:00</updated><id>http://localhost:4000/notes/1811_3</id><content type="html" xml:base="http://localhost:4000/notes/1811_3/">&lt;p&gt;누군가의 한마디가 큰 울림, 새로운 시발점을 불러오는 경험은 누구나 다 있다.&lt;/p&gt;

&lt;p&gt;조금 전 ‘대화의 희열 - 아이유 편’을 보는데,&lt;/p&gt;

&lt;p&gt;아이유가 암묵적으로 행해지고 있던 음원 시장의 규칙을 깬 이야기를 했다.&lt;/p&gt;

&lt;p&gt;음원 시장은 암묵적으로 오후 12시부터 6시까지 음원발표하는 것을 관행으로 한다고 한다. 이유인즉슨,  그 시간에 스트리밍 집계를 하여 음원 순위에 반영되기 때문에 그 이전/이후에 스트리밍 하는 것은 꽤 큰 손실(Time-loss)가 있을 수 밖에 없다.&lt;/p&gt;

&lt;p&gt;하지만 아이유는 ‘가을 아침’ 이라는 곡을 발매할때, 이건 누가봐도 아침 노랜데 오후에 낼 수 없다는 신념으로 모두가 반대하는, 그리고 경제적인 손실을 감수하고 아침에 발표했다고 한다.&lt;/p&gt;

&lt;p&gt;(결과적으로 출근/등교 길에 이 노래를 접했던 대중들의 큰 공감을 사서 좋은 음원 순위를 기록하기도 했다고 한다.)&lt;/p&gt;

&lt;p&gt;그리고 아이유는 이러한 형식적인 관행은 누군가 깨지 않으면 계속해서 같은 패러다임안에서 굴러가기 때문에, 창의적인 것이 실현되기 어렵다고 한다. 그 위험한 승부수를 내밀 수 있었던 포부와 자신감 그리고 자신의 음악에 대한 자부심까지 느껴져서 멋진 아티스트라는 생각이 들었다.&lt;/p&gt;

&lt;p&gt;(아이유 음악은 좋아하지만 아이유를 찬양하는 ‘절대’ 아니다.)&lt;/p&gt;

&lt;p&gt;평소 그 생각의 깊이가 얼마나 큰 지 모르겠지만, 아티스트라고 칭하는 사람들은 꽤 다른 영역에. 그리고 아이돌이라는 껍데기에 씌여져 조금은 ‘평가절하’되고 있는(어쩌면 나만 그러고 있을지 모르겠지만) 아티스트들이 많은 것 같다.&lt;/p&gt;

&lt;p&gt;‘어린 친구들이 뭘 알아’ 라는 꼰대식 마인드는 사실 나에게도 있다.&lt;/p&gt;

&lt;p&gt;삶의 지혜, 세상을 보는 식견은 어느정도 세월에 비례한다고 생각했지만.&lt;/p&gt;

&lt;p&gt;10대 어린 나이부터 활동해온 한 가수가 정신없이 시달리는 스케줄 속에서도 세상을 바라보는 통찰과 자기 내면의 훈련을 해내가는 과정이 대단하다고 생각한다.&lt;/p&gt;

&lt;p&gt;흔히 ‘공인’이라고 불리는 대중들의 인지도를 먹고 사는 인물들에 대한 잣대가 엄격하다.&lt;/p&gt;

&lt;p&gt;그도 그럴 것이, 그들이 실제로 대중(국민)들에게 미치는 영향력이 생각보다 강력하기 때문이다.&lt;/p&gt;

&lt;p&gt;같은 맥락에서 아이유가 했던 저 작은 날개짓이 누군가에게 나비효과가 되어 큰 태풍을 일으킬 수도 있다.&lt;/p&gt;

&lt;p&gt;그래서 난 새로운 것. 관행과 벗어난 무언가. 그리고 그것을 접근하는 과정들이 좋다.&lt;/p&gt;

&lt;p&gt;같은 이유로 스터디와 같은 모임을 좋아한다. 특히 여러 사람이 모여 이야기 나누는 것이 좋다.&lt;/p&gt;

&lt;p&gt;사람들이 모였을떄 재미난 경험들.&lt;/p&gt;

&lt;p&gt;내가 불현듯 내뱉은 한마디에 옆에서 한마디씩 살을 붙여주어 풍성한 가지가 달린 나무가 되기도 한다.&lt;/p&gt;

&lt;p&gt;예를들어, 스터디 이름을 정하는데 있어서 고민을 하던 중&lt;/p&gt;

&lt;p&gt;누군가 ‘우리는 토요일마다 모이니까…’ 라는 한마디에&lt;/p&gt;

&lt;p&gt;‘토모’라는 스터디명이 탄생했다.&lt;/p&gt;

&lt;p&gt;1차원적이고 직관적인 이름이라고 우습게 들릴 수 있지만, 우리는 이 이름이 너무 만족스러웠고 가장 우리다운 이름이었다.&lt;/p&gt;

&lt;p&gt;또, 스터디 주제에 대한 아이디어를 고민할때도 아무 얘기나 내뱉은 한마디에 불씨가 지펴져 꽤 뜨거운 토론으로 이어지기도 한다.&lt;/p&gt;

&lt;p&gt;그 불씨를 누가 집히느냐 이다.&lt;/p&gt;

&lt;p&gt;[어떻게, 무엇을]과 같은 형식은 중요하지 않다.&lt;/p&gt;

&lt;p&gt;불씨만 집혀주면된다. 판 만 준비해주면 된다는 것이다.&lt;/p&gt;

&lt;p&gt;그것이 어떤 형태이든 그 새로운 불씨는 누군가의 심지에 불이 붙을 수 있다.&lt;/p&gt;

&lt;p&gt;세상을 조금 더 주의깊게 바라보고 누군가의 소리에 귀기울이고 산다면.&lt;/p&gt;

&lt;p&gt;그리고 내 마음 속에 언제든지 불이 붙을 수 있는 심지를 준비해 놓는다면.&lt;/p&gt;

&lt;p&gt;언제든지 큰 폭발력을 낼 수 있지 않을까.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;2018.11.10 새벽 6시에 뻘글…&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name>@betterFLY</name><email>betterfly4202@gmail.com</email></author><summary type="html">누군가의 한마디가 큰 울림, 새로운 시발점을 불러오는 경험은 누구나 다 있다.</summary></entry><entry><title type="html">paintComponent</title><link href="http://localhost:4000/notes/1811_2/" rel="alternate" type="text/html" title="paintComponent" /><published>2018-11-08T00:00:00+09:00</published><updated>2018-11-08T00:00:00+09:00</updated><id>http://localhost:4000/notes/1811_2</id><content type="html" xml:base="http://localhost:4000/notes/1811_2/">&lt;p&gt;Java Swing component를 이용해서 간단한 음악게임을 만들고있다.&lt;/p&gt;

&lt;p&gt;화면을 그리는 중인데&lt;/p&gt;

&lt;p&gt;paint 와 paintComponent 간의 순서 또는 버퍼문제로 이미지가 제대로 뜨지 않는다.&lt;/p&gt;

&lt;p&gt;백그라운드 이미지 위에 JLabel 또는 JButton이 위치해야하는데,&lt;/p&gt;

&lt;p&gt;참고하고 있는 곳에서는 paint()를 이용해서 백그라운드 이미지를 그리고,&lt;/p&gt;

&lt;p&gt;paintComponent() 를 이용해서 이미지 위에 버튼이나 레이블같은것을 뿌려준다고 하는데,&lt;/p&gt;

&lt;p&gt;이 과정이 이중버퍼를 통해서 이루어지는 것으로 이해했는데&lt;/p&gt;

&lt;p&gt;안된다.&lt;/p&gt;

&lt;p&gt;아… 답답해&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;paint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Graphics&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;screenImage&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;createImage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;SCREEN_WIDTH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;SCREEN_HEIGHT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;screenGraphic&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;screenImage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getGraphics&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;screenDraw&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;screenGraphic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;drawImage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;screenImage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;screenDraw&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Graphics&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;paintComponents&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;drawImage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;introBackground&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//        this.revalidate();&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//        this.repaint();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;paintComponents()를 올리면, introBackground가 나오고&lt;/p&gt;

&lt;p&gt;내리면 버튼이나 레이블이 나오고 어쩌라는거…&lt;/p&gt;</content><author><name>@betterFLY</name><email>betterfly4202@gmail.com</email></author><summary type="html">Java Swing component를 이용해서 간단한 음악게임을 만들고있다.</summary></entry><entry><title type="html">우선 순위</title><link href="http://localhost:4000/notes/1811_1/" rel="alternate" type="text/html" title="우선 순위" /><published>2018-11-06T00:00:00+09:00</published><updated>2018-11-06T00:00:00+09:00</updated><id>http://localhost:4000/notes/1811_1</id><content type="html" xml:base="http://localhost:4000/notes/1811_1/">&lt;p&gt;벌써 한달이 지났다.&lt;/p&gt;

&lt;p&gt;꽤 많은 일들이 있었다.&lt;/p&gt;

&lt;p&gt;내가 작업한 모듈이 서비스에서 활용되기도 한다.&lt;/p&gt;

&lt;p&gt;그리고 최근엔 embulk를 통해 bigquery -&amp;gt; vertica 의 etl 작업을 진행하고 있다.&lt;/p&gt;

&lt;p&gt;정확히는 저번주 목요일부터 진행을했다.&lt;/p&gt;

&lt;p&gt;noSQL이라는 데이터도 처음 다루어 보았다.&lt;/p&gt;

&lt;p&gt;여전히 많은 것들이 새롭고 낯설기만하다.&lt;/p&gt;

&lt;p&gt;그런데 이제 그 낯섬에 대해선 극복이 필요할 것 같다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;이슈가 터졌기 때문이다&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;그것도 양방향에서…&lt;/p&gt;

&lt;p&gt;‘이충일’이라는 스레드는 동시 작업이 들어와서 병목을 겪었다.&lt;/p&gt;

&lt;p&gt;이전에 push 모듈을 만들었던 A 라는 프로세스와&lt;/p&gt;

&lt;p&gt;현재 진행 중인 빅데이터 etl 하는 B 라는 프로세스의 충돌이다.&lt;/p&gt;

&lt;p&gt;나라는 스레드를 관리하는 사람은 나의 사수이다. 나의 사수분께서 내 스레드의 스케줄을 관리한다. 우선순위를 선정하고, 둘 중 무엇을 해야할지 몰라서 작업이 멈춰있는 나는 사수님이 설정한 스케줄대로 잡을 진행한다.&lt;/p&gt;

&lt;p&gt;A라는 모듈의 이슈를 먼저할 것으로 스케줄링되었다.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;A모듈의 문제는 원 서버에서 보내는 데이터가 제대로 업데이트가 되지 않는 이슈였다.&lt;/p&gt;

&lt;p&gt;이 이슈를 겪으며 가장 치명적이고 기본적인 문제를 파악했는데, 다름아닌 작업을 할때 &lt;em&gt;이 일이 어떻게 돌아가는 지 모르고 시작했다는 것이다.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;개발자가 개발을 하는데 내가 무엇을 만드는지 모르고 시작한 것이다.&lt;/p&gt;

&lt;p&gt;그저 ‘돌아가기만 하는’ 모듈을 만들어 놓은 것이다. 특별히 에러는 발생하지 않았고 로그도 잘 찍혔으며, 입력한 데이터가 제대로 들어온다.&lt;/p&gt;

&lt;p&gt;사실 쉽게 생각하면 그것이 전부다.&lt;/p&gt;

&lt;p&gt;하지만 디비 각 필드마다 어떤 역할을 하고, 어떤 값을 키 값으로 할것인지. 또 이 디비를 사용하는 클라이언트 개발자는 어떤 필드를 필요로 하는지 등등&lt;/p&gt;

&lt;p&gt;참 생각없이 개발했다. 그저 자바코드를 어떻게 짤까. 객체지향적으로 하려면 어떨까. 중복은 어떻게 제거할까.&lt;/p&gt;

&lt;p&gt;틀리진 않지만. 우선순위가 잘못됐다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;내가 무엇을 만들어야 하는지&lt;/li&gt;
  &lt;li&gt;이 서비스를 사용하는 사람은 무엇을 필요로 하는지&lt;/li&gt;
  &lt;li&gt;그것을 어떻게 만들 것인지&lt;/li&gt;
  &lt;li&gt;로그는 어떻게 찍을 것인지&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;등등&lt;/p&gt;

&lt;p&gt;당연한 이야기지만, 모든 일에는 순서가 중요한 것 같다.&lt;/p&gt;

&lt;p&gt;그 순서를 고민하고, 어떤 방향으로 어떻게 진행할지를 설계하는 모든 과정이 아키텍트겠지.&lt;/p&gt;

&lt;p&gt;급하게 결과만을 좇아서 만들어 놓은 결과를 놓고 돌아보면, 결국 처음으로 다시 돌아간다.&lt;/p&gt;

&lt;p&gt;처음 시작할때 쫓기는 마음으로 일단 코딩부터 해야겠다고 IDE를 켜는 순간 제대로 세우지 못한 계획 때문에 다시 처음부터 고민해봐야할때가 많다.&lt;/p&gt;

&lt;p&gt;아마 그런 훈련이 몸에 익은 사람들을 &lt;strong&gt;시니어&lt;/strong&gt;라고 하지 않을까 싶다.&lt;/p&gt;</content><author><name>@betterFLY</name><email>betterfly4202@gmail.com</email></author><summary type="html">벌써 한달이 지났다.</summary></entry><entry><title type="html">[음악게임 만들기] - 01.프로젝트 시작 및 Intro화면 만들기</title><link href="http://localhost:4000/java/toy_rhythmGame_1/" rel="alternate" type="text/html" title="[음악게임 만들기] - 01.프로젝트 시작 및 Intro화면 만들기" /><published>2018-11-01T00:00:00+09:00</published><updated>2018-11-01T00:00:00+09:00</updated><id>http://localhost:4000/java/toy_rhythmGame_1</id><content type="html" xml:base="http://localhost:4000/java/toy_rhythmGame_1/">&lt;h2 id=&quot;01-java-swing을-이용한-음악게임-만들기&quot;&gt;01. Java Swing을 이용한 음악게임 만들기&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;소스코드는 깃헙에서 관리한다. &lt;br /&gt;https://github.com/betterfly88/SenseOfRhythm&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;평소 즐겨보던 유튜버 ‘동빈나’님의 컨텐츠를 보던 중 재미있는 주제가 있어 공부할겸, 그리고 기록으로 남겨 보려 한다.&lt;/p&gt;

&lt;p&gt;정말 오랜만에 Java의 Swing컴포넌트를 이용한 프로그램 개발이다.&lt;/p&gt;

&lt;p&gt;현재 계획으로는&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;유튜버의 내용을 그대로 따라간다.&lt;/li&gt;
  &lt;li&gt;중간 중간 개선이 필요하다고 생각하는 부분은 효율적으로 수정해본다.&lt;/li&gt;
  &lt;li&gt;실제로 게임의 구실을 하는 프로젝트를 완성한다.&lt;/li&gt;
  &lt;li&gt;배포 및 서비스 단계까지 실행해본다.&lt;/li&gt;
  &lt;li&gt;리팩토링을 통해서 전체 소스코드를 최적화한다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;현재 생각을 이러하다. 여유가 있다면 웹에서 실행되도록 진행해보고싶긴한데, 그건 차츰 생각해보자.&lt;/p&gt;

&lt;p&gt;우선 프로젝트를 생성한다. 동빈나님은 기본 프로젝트로 생성했지만 추후에 라이브러리를 가져다 쓸 일도 있고, 최종 작업 후 조금 더 편리한 배포를 위해서 메이븐으로 프로젝트를 만들어주자.&lt;/p&gt;

&lt;p&gt;프로젝트 생성 후 실행을 위한 메인 메서드부터 생성한다.&lt;/p&gt;

&lt;p&gt;나는 다음과 같이 /src/main/java/app/rhythm/player 패키지 하위에 Main 메서드를 위치시켰다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/study/dev/2018/11_main_method.png&quot; alt=&quot;main&quot; /&gt;&lt;/p&gt;

&lt;p&gt;메인 메서드에서 할 일은 프로그램의 실행이다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Main&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SCREEN_WIDTH&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1280&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SCREEN_HEIGHT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;720&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;SenseOfRhythm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;특별한 내용은 없다.&lt;/p&gt;

&lt;p&gt;메인 함수가 할 일은 게임을 실행(new SenseOfRhythm : 게임이름)을 돕는 일 뿐이다.&lt;/p&gt;

&lt;p&gt;SenseOfRhythm이라는 클래스의 인스턴스를 생성하면서 게임은 시작된다.&lt;/p&gt;

&lt;p&gt;상단에 SCREEN_WIDTH/HEIGHT 값은 Swing 컴포넌트를 통해 그려질 화면의 사이즈다.&lt;/p&gt;

&lt;p&gt;기본 사이즈로 1280 * 720 으로 설정했다.&lt;/p&gt;

&lt;p&gt;그리고 이제 게임이 시작될 &lt;strong&gt;SenseOfRhythm&lt;/strong&gt; 이라는 클래스를 만들어보자.&lt;/p&gt;

&lt;p&gt;상단의 스크린샷처럼 우선 Main클래스와 같은 패키지 안에 클래스를 생성했다.&lt;/p&gt;

&lt;p&gt;그리고 이 클래스의 내용은 다음을 포함한다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SenseOfRhythm&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JFrame&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;SenseOfRhythm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;setTitle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Sense Of Rhythm&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;setSize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;SCREEN_WIDTH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;SCREEN_HEIGHT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;setResizable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 사용자 사이즈 조절 제한&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;setLocationRelativeTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 디스플레이 화면의 정 중앙 위치&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;setDefaultCloseOperation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;JFrame&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;EXIT_ON_CLOSE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 프로그램 종료 후 실제로 프로세스를 종료시킴&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;setVisible&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 디스플레이에 노출 (false 설정할 경우 화면이 그려지지 않음)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;현재 클래스에 몇가지 중요한 부분이 있는데,&lt;/p&gt;

&lt;p&gt;우선 JFrame을 상속받았다는 것이다. JFrame은 곧 Java가 제공하는 Swing 컴포넌트를 사용하겠다는 것이다.&lt;/p&gt;

&lt;p&gt;그리고&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;public SenseOfRhythm()&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;생성자를 통해 해당 클래스가 생성되면서 게임에 필요한 기본 세팅을 설정해두었다. 자세한 내용은 소스코드 옆의 주석을 참고하자.&lt;/p&gt;

&lt;p&gt;현재 상태그대로 메인 메서드를 실행하면 1280*720 사이즈의 빈 화면이 출력될 것이다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/study/dev/2018/11_basic_display.png&quot; alt=&quot;display&quot; /&gt;&lt;/p&gt;

&lt;p&gt;화면을 띄우는 것 까지 성공했으면 이제 기본 배경 이미지를 삽입해보자.&lt;/p&gt;

&lt;p&gt;http://wallpaperswide.com&lt;/p&gt;

&lt;p&gt;위 링크를 통해 본인의 입맛에 맞는 이미지를 다운받아보자.(이미지는 현재 화면에 맞는 1280*720 사이즈로 다운받아야 최적화된다.)&lt;/p&gt;

&lt;p&gt;이미지를 띄울때 주의할 점은 기본적인 방법으로 이미지를 띄울때(싱글 버퍼링) 이미지가 바뀌거나, 불러오는 과정에서 버퍼링이 발생하여 깜빡이거나 이미지가 손실되는 문제가 발생할 수있다. &lt;br /&gt;
이러한 문제를 방지하기 위해 [더블 버퍼링]을 사용하는 것이 효율적이다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;더블 버퍼링이란&lt;br /&gt;
현재 프로그램의 전체 화면 크기에 맞는 이미지를 매 순간마다 생성해서 원하는 컴포넌트만 화면에 출력하는 방식이다. 버퍼에 이미지를 담아서 매 순간마다 이미지를 갱신해주기 때문에, 깜빡이거나 손실되는 이미지를 방지할 수 있어 실시간으로 이미지를 다루는 프로그램에서는 주요하게 사용된다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;우선 다운받은 이미지는 resource경로에 옮겨 두자.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/study/dev/2018/11_image_path.png&quot; alt=&quot;image_path&quot; /&gt;&lt;/p&gt;

&lt;p&gt;그리고 이미지파일을 읽어서 화면에 출력시켜주면된다.&lt;/p&gt;

&lt;p&gt;SenseOfRhythm 클래스의 멤버변수로 다음과 같이 선언한다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SenseOfRhythm&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JFrame&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Image&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;screenImage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Graphics&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;screenGraphic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Image&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;introBackground&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;그리고 introBackground를 초기화해주면서 이미지를 삽입시켜주자.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;SenseOfRhythm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;setTitle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Sense Of Rhythm&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;setSize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;SCREEN_WIDTH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;SCREEN_HEIGHT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;setResizable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 사용자 사이즈 조절 제한&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;setLocationRelativeTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 화면의 정 중앙&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;setDefaultCloseOperation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;JFrame&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;EXIT_ON_CLOSE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 프로그램 종료 후 실제로 프로세스를 종료시킴&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;setVisible&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 실제로 인터페이스를 표출&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// intro images&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;introBackground&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ImageIcon&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getResource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/images/intro.jpg&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getImage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이미지는 게임이 시작되면서(=SenseOfRhythm 인스턴스가 생성되면서) 출력되어야 하기 때문에, 이 클래스가 초기화되는 부분에 넣어주면된다.&lt;/p&gt;

&lt;p&gt;주의할점은 resources 하위에 이미지를 저장해놓았기 떄문에 &lt;em&gt;Main.class.getResource(“/images/intro.jpg”)&lt;/em&gt; 를 통해서 이미지파일에 접근할 수 있다.&lt;/p&gt;

&lt;p&gt;자 이제 거의 다 왔다.&lt;/p&gt;

&lt;p&gt;이제 실제로 컴포넌트 화면에 이미지를 그려주어야한다.&lt;/p&gt;

&lt;p&gt;이미즤를 가져 왔는데 어디에 어떻게 표현할지를 설정해야하지 않는가?&lt;/p&gt;

&lt;p&gt;다음 두가지 메서드를 만든다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;paint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Graphics&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;screenImage&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;createImage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;SCREEN_WIDTH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;SCREEN_HEIGHT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;screenGraphic&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;screenImage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getGraphics&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;screenDraw&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;screenGraphic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;drawImage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;screenImage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 0,0 에 스크린 이미지를 그림&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;


    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;screenDraw&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Graphics&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// screenDraw 진입시 introBackground를 0,0에 그려준 후 다시 paint함수를 그려준다(this.repaint()) ==&amp;gt; 매 순간마다(프로그램이 종료될때까지) 반&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;drawImage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;introBackground&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;repaint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;먼저 paint라는 함수는 JFrame이 생성되면서 가장 먼저 화면에 그려지는 기본 함수이다.&lt;/p&gt;

&lt;p&gt;안에 내용을 살펴보면, createImage() 그려질 이미지의 사이즈(x,y)&lt;/p&gt;

&lt;p&gt;drawImage는 어떤이미지를, 어떤 위치에 그릴 것인지 설정한다.&lt;/p&gt;

&lt;p&gt;그리고 screenDraw 함수를 통해 아까 언급했던 더블 버퍼링을 구현했다.&lt;/p&gt;

&lt;p&gt;this.repaint()라는 것은 paint() 함수를 호출하는 것이기 때문에,&lt;/p&gt;

&lt;p&gt;paint() -&amp;gt; screenDraw() -&amp;gt; paint() 로 돌아오는 재귀적 구조로 볼 수 있다.&lt;/p&gt;

&lt;p&gt;위와 같이 설정했다면 화면 출력을 위한 구성이 완료되었다.&lt;/p&gt;

&lt;p&gt;다시 메인메서드를 실행해보자.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/study/dev/2018/11_181101/run.png&quot; alt=&quot;run&quot; /&gt;&lt;/p&gt;

&lt;p&gt;intro 이미지가 잘 나오는 것을 확인할 수 있다.&lt;/p&gt;

&lt;p&gt;다음에는 intro 배경음악이 흘러나오는 것을 구현해볼 것이다.&lt;/p&gt;

&lt;h3 id=&quot;출처&quot;&gt;출처&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;유튜버 동빈나 : https://www.youtube.com/channel/UChflhu32f5EUHlY7_SetNWw&lt;/li&gt;
&lt;/ul&gt;</content><author><name>@betterFLY</name><email>betterfly4202@gmail.com</email></author><category term="Swing" /><summary type="html">01. Java Swing을 이용한 음악게임 만들기</summary></entry><entry><title type="html">Vue.js 시작하기</title><link href="http://localhost:4000/java/vuejs/" rel="alternate" type="text/html" title="Vue.js 시작하기" /><published>2018-10-28T00:00:00+09:00</published><updated>2018-10-28T00:00:00+09:00</updated><id>http://localhost:4000/java/vuejs</id><content type="html" xml:base="http://localhost:4000/java/vuejs/">&lt;h2 id=&quot;vuejs-설치-및-기본-환경-구성&quot;&gt;Vue.js 설치 및 기본 환경 구성&lt;/h2&gt;

&lt;p&gt;참고 : https://medium.com/witinweb/vue-cli-%EB%A1%9C-vue-js-%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0-browserify-webpack-22582202cd52&lt;/p&gt;

&lt;p&gt;https://velopert.com/3007&lt;/p&gt;

&lt;p&gt;vue.js는 기본적으로 node.js서버 위에서 돌아간다.&lt;/p&gt;

&lt;p&gt;node.js를 설치 후 npm(node package manager)을 통해 손쉽게 vue.js에 필요한 환경을 구성할 수 있다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;node.js 설치&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
  &lt;p&gt;https://nodejs.org/ko/&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;node -v // 설치 버전 확인&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;node.js가 정상적으로 설치되었다면, 이제 vue.js를 본격적으로 설치해보자.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;npm install -g vue-cli
// global에 설치하기 때문에 permission denided 발생할 수 있다. =&amp;gt; sudo로 진행&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;vue.js 프로젝트 생성하기&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;// vue init &lt;template-name&gt; &lt;project-name&gt;
vue init [webpack/browserify/simple] [my-project]&lt;/project-name&gt;&lt;/template-name&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;위 커맨드를 보면, vue 기본 환경을 생성하는데 중간에 템플릿은 본인의 입맛에 따라 고르면된다.
(&lt;em&gt;vue list&lt;/em&gt; 통해 템플릿 리스트 확인)&lt;/p&gt;

&lt;p&gt;webpack또는 borwerify는 &lt;a href=&quot;https://blog.perfectacle.com/2016/11/18/module-bundling-with-webpck/&quot;&gt;모듈번들러&lt;/a&gt; 역할을 한다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;*모듈 번들러&lt;/strong&gt;란?
번들링이란, 쉽게 말해 각각의 파일을 하나로 만드는 것으로 보면된다.
번들링은 여러가지 파일을 모아서 하나로 만드는 것이라고 보면 된다. 이렇게 번들링된 모듈들을 하나로 합쳐서 HTTP Request를 최소화 하여 성능을 향상 시키기 위해 사용된다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;프로젝트 생성시 configuration 설정에 대한 질문이 나오는데 크게 신경쓰지 않아도 된다.
enter를 계속 눌러줘서 가볍게 기본 값으로 세팅한다.&lt;/p&gt;

&lt;p&gt;끝났다.&lt;/p&gt;

&lt;p&gt;필자는 webpack을 통해 프로젝트를 구성했다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;vue init webpack frontend&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;frontend라는 vue project가 금방 완성된다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;cd frontend&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;처음 설치한 프로젝트의 모듈들에 혹시나 설치가 안된 부분이 있을 수 있다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;npm install&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;install 내용이 없거나, 완료된 경우 프로젝트를 실행해주면된다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;npm run dev&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;특별히 host 또는 port를 변경하지 않았다면&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;http://localhost:8080&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;을 통해 접속을 확인할 수 있다.&lt;/p&gt;</content><author><name>@betterFLY</name><email>betterfly4202@gmail.com</email></author><category term="Vue.js" /><summary type="html">Vue.js 설치 및 기본 환경 구성</summary></entry><entry><title type="html">Google Cloud Summit in Seoul</title><link href="http://localhost:4000/notes/2018_google_summit_in_seoul/" rel="alternate" type="text/html" title="Google Cloud Summit in Seoul" /><published>2018-10-25T00:00:00+09:00</published><updated>2018-10-25T00:00:00+09:00</updated><id>http://localhost:4000/notes/2018_google_summit_in_seoul</id><content type="html" xml:base="http://localhost:4000/notes/2018_google_summit_in_seoul/">&lt;h3 id=&quot;1st-google-cloud-summit&quot;&gt;1st. Google Cloud Summit…&lt;/h3&gt;

&lt;p&gt;기다리던, 그리고 기대했던 구글 클라우드 서밋 행사가 있는 날이다.&lt;/p&gt;

&lt;p&gt;팀에서 함께 하는 행사이기 때문에 약간 소풍(?)가는 듯한 느낌도 들었고, 어쨋든 회사에서 권장해서 참여한다는것도 고무적이었다.&lt;/p&gt;

&lt;p&gt;Google Cloud Summit은 이번에 한국에서 처음 열리는 행사라고 한다.&lt;/p&gt;

&lt;p&gt;올 4월에 AWS Summit을 참석했었는데, AWS에 비해선 조금 작은 규모로 진행됐지만 전체적인 세션 구성은 오히려 더 흥미로웠다.&lt;/p&gt;

&lt;p&gt;AWS는 전체적인 세션 구성이 서비스를 소개하고 홍보하는 느낌이 강했다면, 이번 구글 서밋은 이 서비스를 어떻게 적용할 수 있는지에 대한 사례 위주의 세션들로 구성되어 있어서, 실제로 개발자들이 어떻게 활용할 수 있는지 좋은 가이드를 제시해준다는 느낌이었다.&lt;/p&gt;

&lt;p&gt;사실 세션에 크게 집중하지 못하여 많으 내용을 기록하지 못했다.&lt;/p&gt;

&lt;p&gt;하지만 가장 인상깊었던 2가지 세션이 있다.&lt;/p&gt;

&lt;p&gt;가장 먼저 기조연설을 했던 구글의 임직원분들의 발표였는데 그 중 구글 IoT 부사장을 맡고 있는 ‘이인종’ 이라는 분의 연설이었다.&lt;/p&gt;

&lt;p&gt;사진을 담아두지 못해 아쉽지만, 굉장히 우리가 생각하는 ‘구글’ 그 자체였다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/notes/181025/lee.jpg&quot; alt=&quot;lee&quot; /&gt;
출처 :http://news1.kr/photos/view/?3360340&lt;/p&gt;

&lt;p&gt;자유분방한 헤어스타일, 기존연설의 연사임에도 후드티를 입고 있는 캐주얼한 복장, 여유있는 모습과 유머러스한 말투들.&lt;/p&gt;

&lt;p&gt;겉으로 보여지는 모습만 봐도 절대 평범하지 않다.&lt;/p&gt;

&lt;p&gt;그리고 다루는 이야기들은 더욱 흥미로웠는데, 특히 LG전자와 함께 스마트시티를 계획하고 있다는 소식이다.&lt;/p&gt;

&lt;p&gt;도심에 설치된 CCTV를 분석하여 교통량을 예상하고, 더 나은 길을 제시해주기도 하고,&lt;/p&gt;

&lt;p&gt;동네의 슈퍼, 세탁소 등에 모두 IoT를 결합하여 실시간으로 내가 방문하고자 하는 매장의 정보를 얻을 수 있다는 것이다.&lt;/p&gt;

&lt;p&gt;참 멋있다는 생각이 들었다.&lt;/p&gt;

&lt;p&gt;아직은 스스로 개발자라고 하기에도 부끄러운 위치이지만, 같은 개발자들이 하는 일들이 세상을 바꾸는데 기여한다는 것이 멋지고 대단하단 생각이 들면서도, 한편으론 나는 무엇에 기여할 수 있을까. 어떻게 하면 저런 고민들을 실천으로 옮길 수 있을까에 대한 막연한 혼자만의 고민속에 빠져들며 나 혼자 진지해지곤 했다.&lt;/p&gt;

&lt;p&gt;기조연설을 마친 후 잠시 뒤 점심식사를 했다.&lt;/p&gt;

&lt;p&gt;안내받은 공간에 정갈한 도시락들이 놓여있었고, 식사를 하던 중 스트리밍되는 화면에서 아주 흥미로운 화면을 볼 수 있었다.&lt;/p&gt;

&lt;p&gt;[주제가 있는 런치] 라는 주제로 진행된 이 행사는,&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;3D프린터로 만드는 전자 의수&lt;/li&gt;
  &lt;li&gt;시각장애인을 위한 모바일 어플리케이션&lt;/li&gt;
  &lt;li&gt;음성을 통한 파킨슨 병 진단 디바이스&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;잘다니던 일류기업을 나와 3D프린터로 ‘의수’를 만들어 전세계 시장에 뛰어다니며 발품을 파는 멋진 개발자분의 발표로 시작했다.&lt;/p&gt;

&lt;p&gt;말씀도 잘하셨고, 아주 멋지고 의미있고 그리고 상당히 가치있는 일을 하는 것에 큰 감명을 받았다.&lt;/p&gt;

&lt;p&gt;그리고 다음 주제는 ‘시각장애인을 위한 모바일 어플리케이션’ 이라는 주제로 발표가 이어졌다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/notes/181025/dongtan.jpeg&quot; alt=&quot;dongtan&quot; /&gt;&lt;/p&gt;

&lt;p&gt;그리고 아주 놀랍게도 고등학교 2학년의 학생이 무대에 올라섰다.&lt;/p&gt;

&lt;p&gt;고등학교 2학년이 이 수백명 이상의 개발자들이 모인 공간에서 발표를 한다. 자신이 만든 서비스를.&lt;/p&gt;

&lt;p&gt;그리고 그 주제와 실천은 더욱 참신했다.&lt;/p&gt;

&lt;p&gt;‘요즘은 자동차도 사람의 손을 쓰지 않고 움직이는데, 어떻게 사람은 하다못해 안내견의 도움이라도 없으면 가까운 동네조차 다니지 못한다는 것’ 에 착안하여 개발을 시작했다고 한다.&lt;/p&gt;

&lt;p&gt;그리고 실제로 이런 어플리케이션을 만들기 위해선 동네의 위치 정보를 제공해주는 api가 있어야 만들 수 있는데, 참고할 만한 데이터가 존재하지 않아 직접 자전거에 카메라를 설치하여 동네 구석구석 직접 촬영하고 누비며 본인이 직접 서비스에 이용할 데이터를 수집했다.&lt;/p&gt;

&lt;p&gt;그리고 이 과정에서 검정색은 ‘차도’, 흰색,빨간색,초록색 등의 색상이 있으면 ‘인도’ 라는 패턴을 머신러닝으로 학습시켜 어플리케이션이 스스로 모든 데이터를 분석하여 서비스를 제공하도록 구현해냈다고 한다.&lt;/p&gt;

&lt;p&gt;그 과정에서 쓰레기더미, 장애물 등의 변수가 있을때 겪었던 문제들을 어떻게 처리했는지를, 조금은 긴장한채로 조심스럽게 풀어나갔지만 부모님뻘되는 사람들이 수백명 모인 공간에서 자신의 이야기를 풀어나간다는 것 자체만으로도 대단했고 그 모습들이 하나같이 너무나 인상적이었다.&lt;/p&gt;

&lt;p&gt;고등학교 2학년의 나이에 그런 생각을 했다는 것도 너무 대단했고, 단순히 생각이나 상상으로 그치는 것이 아니라 실천으로 옮겼고, 실제로 그것을 완성시켰다.&lt;/p&gt;

&lt;p&gt;적어도 나에겐 그것이 완벽하게 작동하는 어플리케이션인지는 중요하지 않았다.&lt;/p&gt;

&lt;p&gt;지금 나에게 그런 어플리케이션을 만들어보라고 아이디어를 제공해줘도 만들어내기 힘들 것이다.&lt;/p&gt;

&lt;p&gt;그 학생이 단순히 그런 어플리케이션을 만들었다는 것이 놀라운 것이 아니라,&lt;/p&gt;

&lt;p&gt;그런 생각을 하는 과정과 실천력이 가장 존경스럽기까지 했다.&lt;/p&gt;

&lt;p&gt;그 학생의 발표가 끝난 후 약간은 벙찐채로 로비로 나왔다.&lt;/p&gt;

&lt;p&gt;여러가지 낯선 감정들이 교차했다. 아주 긍정적이고 가슴 깊은 곳에서 벅차오르는 기분이었다.&lt;/p&gt;

&lt;p&gt;그런데 여기서 끝이 아니다.&lt;/p&gt;

&lt;p&gt;로비로 나와 1층으로 이동 후 다음 세션을 위해 미리 들어가 있으려 했는데, 그 무대위에 교복을 입은 여자 학생이 발표를 하고 있었다.&lt;/p&gt;

&lt;p&gt;말을 너무나 잘했다. 기술적인 용어들도 그렇고 자신이 겪은 문제, 그것 해결 하는 과정 등등 모든 표현이 너무나 정갈하고 정리되어있었다.&lt;/p&gt;

&lt;p&gt;처음엔 어떤 기업에서 홍보차 나온 엔지니어라고 생각했지만, 그 학생은 고등학교 3학년의 여학생이었다.&lt;/p&gt;

&lt;p&gt;초입에 어떤 계기로 어떻게 시작했는지를 놓쳤지만, 내가 들은 부분은 파킨슨병이 음성의 떨림 정도로 판별이 가능하여 이를 발견할 경우 초기에 조치가 가능한데, 우리나라에 이런 기술이 보급되지 않아 직접 구현해낸 것이다.&lt;/p&gt;

&lt;p&gt;그리고 그 과정을 역시 머신러닝 ai를 통해 그 판별해 낼 수 있도록 구현하는 과정을 아무 멋지게 설명해나갔다.&lt;/p&gt;

&lt;p&gt;그리고 이 학생은 자신이 소프트웨어만을 개발해왔기 떄문에, 이 소프트웨어를 사용하기 위해서 목소리를 담을 수 있는 디바이스가필요했다고한다.&lt;/p&gt;

&lt;p&gt;정확한 모임은 기억나지 않지만, 개발자들이 모이는 캠프에 참여하여 자신의 소프트웨어를 소개한 후 팀을 꾸려서 디바이스와 소프트웨어를 결합시켜 이 도구를 만들어 낸 이야기였다.&lt;/p&gt;

&lt;p&gt;그 팀에는 10여명의 팀원이 함께했고, 그 팀원들은 현업에 종사하는 개발자이거나 대학원생 등으로 구성된 전문 인력들이었다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/notes/2018/10/parkinson.jpeg&quot; alt=&quot;parkinson&quot; /&gt;&lt;/p&gt;

&lt;p&gt;앞에 남학생과 또 다른 아주 대단한 학생이었다.&lt;/p&gt;

&lt;p&gt;혼자의 힘이 아닌, 자신이 무엇이 부족한지를 알고 자신에게 도움을 줄 수 있는 사람을 정확히 찾아냈고, 그들과 아주 좋은 콜라보를 이루어 근사한 어플리케이션을 완성했다.&lt;/p&gt;

&lt;p&gt;연속으로 이 두 학생의 이야기를 듣고 나니 정말 망치로 얻어마진 기분이었다.&lt;/p&gt;

&lt;p&gt;좌책감이나 좌절감이 아니라, 내가 꿈이 없이 맹목적으로 개발만 잘하고 싶다는 생각으로 살고 있었다는 것을 깨닫게되었다.&lt;/p&gt;

&lt;p&gt;사실 ‘개발을 정말 잘하고 싶고, 개발을 잘해서 인정받고 필요한 사람이 되기 싶다’ 정도만 생각했지 궁극적으로 어떤 개발자가 되겠다는 생각은 하지 못했던 것 같다.&lt;/p&gt;

&lt;p&gt;오늘 컨퍼런스의 취지는 GCP의 특징이나 서비스의 고도화 등등을 소개하는 자리였을테지만, 내가 느낀 것은 세상에 기여하는 개발자들의 모습을 통해 나는 과연 무엇을 할 수 있을까를 돌아보는 시간이었다.&lt;/p&gt;

&lt;p&gt;거창하고 대단해보이는 개발자가 아니라, 어떤 방식으로든 사회에 기여하고, 내가 하는 일에 더욱 가치를 부여할 수 있는 사람이 되고 싶다. 그런 철학이 있고, 생각을 하는 사람이 되어야 한다.&lt;/p&gt;</content><author><name>@betterFLY</name><email>betterfly4202@gmail.com</email></author><category term="Google Cloud Summit" /><summary type="html">1st. Google Cloud Summit…</summary></entry></feed>